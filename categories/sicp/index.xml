<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>SICP on SweetGargamel</title>
        <link>https://SweetGargamel.github.io/categories/sicp/</link>
        <description>Recent content in SICP on SweetGargamel</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>SweetGargamel</copyright>
        <lastBuildDate>Wed, 08 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://SweetGargamel.github.io/categories/sicp/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>解析SICP-Proj4 EC</title>
        <link>https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/</link>
        <pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/</guid>
        <description>&lt;img src="https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/CoverImg.png" alt="Featured image of post 解析SICP-Proj4 EC" /&gt;&lt;h1 id=&#34;解析sicp-proj4-ec&#34;&gt;解析SICP-Proj4 EC
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/florian-klauer-nptLmg6jqDo-unsplash.png&#34;
	width=&#34;667&#34;
	height=&#34;1000&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/florian-klauer-nptLmg6jqDo-unsplash_hu_58556558a8353d86.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/florian-klauer-nptLmg6jqDo-unsplash_hu_3ae257f98e7fcd61.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by Florian Klauer on Unsplash|600&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文章请搭配NJU-SICP Project04 EC (Adopted from CS61A from Berkeley) 食用&lt;/p&gt;
&lt;p&gt;Written By SweetGargamel&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sicp.pascal-lab.net/2024/projects/proj04/intro.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Introduction - proj04: Scheme&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sicp.pascal-lab.net/2024/projects/proj04/guide1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Debugging Guide - proj04: Scheme&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;原问题&#34;&gt;原问题
&lt;/h2&gt;&lt;h3 id=&#34;why-current-interpreter-cannot-properly-process-tail-call&#34;&gt;Why current interpreter cannot properly process tail call?
&lt;/h3&gt;&lt;p&gt;Consider such scheme code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;define &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The current evaluation process is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     scheme_eval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;factor &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; 1&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; scheme_eval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;factor &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; 10&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;===&lt;/span&gt;&amp;gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; scheme_eval&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;factor &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; 90&lt;span class=&#34;o&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The problem is &lt;code&gt;python&lt;/code&gt; interpreter does not properly perform tail call.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;re mainly three way to solve this problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transform the scheme interpreter to an &lt;strong&gt;non-recursive&lt;/strong&gt; interpreter, i.e., eliminate all recursive call to &lt;code&gt;scheme_eval&lt;/code&gt;. That can be accomplished by
&lt;ul&gt;
&lt;li&gt;rewrite this interpreter to an &lt;em&gt;CEK&lt;/em&gt; interpreter. (&amp;lsquo;C&amp;rsquo; means &lt;em&gt;control&lt;/em&gt;, &amp;lsquo;E&amp;rsquo; means &lt;em&gt;environment&lt;/em&gt;, &amp;lsquo;K&amp;rsquo; means &lt;em&gt;continuation&lt;/em&gt;). See &lt;a class=&#34;link&#34; href=&#34;https://felleisen.org/matthias/4400-s20/lecture23.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and Chap. 5 of &lt;em&gt;ESSENTIALS OF PROGRAMMING LANGUAGES&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;rewrite this interpreter to an &lt;em&gt;trampolined&lt;/em&gt; interpreter. &lt;strong&gt;We use this approach&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;transform the source scheme code, e.g. &lt;em&gt;Continuation-Passing Style&lt;/em&gt; transformation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;em&gt;trampoline&lt;/em&gt; technique is the simplest one. So we use this approach.&lt;/p&gt;
&lt;h3 id=&#34;trampoline&#34;&gt;Trampoline
&lt;/h3&gt;&lt;p&gt;The trampoline technique is a simple technique to perform proper tail call in a &amp;ldquo;bad&amp;rdquo; language (e.g. Python, C, C++, Java, &amp;hellip;).&lt;/p&gt;
&lt;p&gt;For example, we can define a &lt;code&gt;sum&lt;/code&gt; recursive function in python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And &lt;code&gt;sum(10000, 0)&lt;/code&gt; will produce a &lt;code&gt;StackOverflow&lt;/code&gt; error. Now we &amp;ldquo;trampoline&amp;rdquo; such function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Unevaluated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum_tram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Unevaluated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# use do-while here is better, but Python does not support that&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum_tram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Unevaluated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum_tram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now &lt;code&gt;sum(10000, 0)&lt;/code&gt; will properly works. This can be generalized to transform all recursive functions to loops, see &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/189725/what-is-a-trampoline-function&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. But the above form is enough for our problem.&lt;/p&gt;
&lt;h3 id=&#34;the-tasks&#34;&gt;The Tasks
&lt;/h3&gt;&lt;p&gt;Complete the function &lt;code&gt;optimize_tail_calls&lt;/code&gt; in &lt;code&gt;scheme_eval_apply.py&lt;/code&gt;. It returns an alternative to &lt;code&gt;scheme_eval&lt;/code&gt; that is properly tail recursive. That is, the interpreter will allow an unbounded number of active tail calls in constant space. It has a third argument &lt;code&gt;tail&lt;/code&gt; that indicates whether the expression to be evaluated is in a tail context.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Unevaluated&lt;/code&gt; class represents an expression that needs to be evaluated in an environment. When &lt;code&gt;optimized_eval&lt;/code&gt; receives a non-atomic expression in a tail context, it returns an &lt;code&gt;Unevaluated&lt;/code&gt; instance. Otherwise, it should repeatedly call &lt;code&gt;original_scheme_eval&lt;/code&gt; until the result is a value, rather than an &lt;code&gt;Unevaluated&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A successful implementation will require changes to several other functions, including some functions that we provided for you.&lt;/strong&gt; All expressions throughout your interpreter that are in a tail context should be evaluated by calling &lt;code&gt;scheme_eval&lt;/code&gt; with &lt;code&gt;True&lt;/code&gt; as the third argument (now called &lt;code&gt;tail&lt;/code&gt;). Your goal is to determine which expressions are in a tail context throughout your code and change calls to &lt;code&gt;scheme_eval&lt;/code&gt; as needed.&lt;/p&gt;
&lt;p&gt;Once you finish, uncomment the following line in &lt;code&gt;scheme_eval_apply.py&lt;/code&gt; to use your implementation:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scheme_eval = optimize_tail_calls(scheme_eval)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;疑惑引出&#34;&gt;疑惑引出
&lt;/h2&gt;&lt;h3 id=&#34;问题&#34;&gt;问题
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;optimize_tail_calls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_scheme_eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;optimized_eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scheme_symbolp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;self_evaluating&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Unevaluated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# BEGIN PROBLEM EC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# END PROBLEM EC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optimized_eval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;是的，很显然你会不会觉得，开始在运行第一行代码的时候，如果是尾递归的话就会直接返回一个&lt;code&gt;Unevaluated&lt;/code&gt;的玩意，这程序不就该崩了吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;答案&#34;&gt;答案
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;optimize_tail_calls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_scheme_eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;optimized_eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tail&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scheme_symbolp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;self_evaluating&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Unevaluated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# BEGIN PROBLEM EC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_scheme_eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;isinstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Unevaluated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;original_scheme_eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;expr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# END PROBLEM EC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optimized_eval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;是的你看了答案会不会更觉得下面的代码根本就运行不到？&lt;/li&gt;
&lt;li&gt;（当然除了该这些代码还应该按照助教的建议，把凡是尾递归的部分都给加一个&lt;code&gt;tail=True&lt;/code&gt;的参数）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用vscode的debug功能解析&#34;&gt;使用Vscode的Debug功能解析
&lt;/h2&gt;&lt;h3 id=&#34;怎么使用debug&#34;&gt;怎么使用Debug
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接按照助教的提示修改&lt;code&gt;.vscode/launch.json&lt;/code&gt;文件即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/JsonLaunch.png&#34;
	width=&#34;2080&#34;
	height=&#34;1396&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/JsonLaunch_hu_b68b0e57a4b5060d.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/JsonLaunch_hu_8e687725bf3edbfb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Python: Current File&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;program&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;scheme.py&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;s2&#34;&gt;&amp;#34;-i&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;s2&#34;&gt;&amp;#34;tests.scm&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;console&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;integratedTerminal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;justMyCode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;你可以修改&lt;code&gt;tests.scm&lt;/code&gt;里面的测试用例来测试，下面是我的例子&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/SchemeTests.png&#34;
	width=&#34;2019&#34;
	height=&#34;1365&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/SchemeTests_hu_e0fc52c19271dde.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/SchemeTests_hu_3bc149b5174772b5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;354px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;define &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;- &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;* &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;acc&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;factor&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当然别忘打断点了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/BreakPoint.png&#34;
	width=&#34;1391&#34;
	height=&#34;649&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/BreakPoint_hu_38937d91c7bf826f.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/BreakPoint_hu_86996ab732c4038.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;214&#34;
		data-flex-basis=&#34;514px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;debug启动&#34;&gt;Debug，启动！
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击&lt;code&gt;Start Debugging&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/StartDebugging.png&#34;
	width=&#34;971&#34;
	height=&#34;931&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/StartDebugging_hu_20b1dc6de386afc7.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/StartDebugging_hu_25a58548de70ac93.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;|300&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;250px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后你会发现左边出来这些东西，分别是你的&lt;code&gt;VARIABLES&lt;/code&gt;、&lt;code&gt;WATCH&lt;/code&gt;、&lt;code&gt;CALL_STACK&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VARIABLES&lt;/code&gt;是当前的变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WATCH&lt;/code&gt;可以添加自己想看的表达式或者变量的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CALL_STACK&lt;/code&gt;看调用的堆栈&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn.png&#34;
	width=&#34;1971&#34;
	height=&#34;1183&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn_hu_f3c7123fe7654ab3.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn_hu_8ce998a97f6cec53.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;399px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们发现他停到了if这个语句停下来了&lt;/p&gt;
&lt;h3 id=&#34;现在解释器在干啥&#34;&gt;现在解释器在干啥？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我们发现左上角的&lt;code&gt;expr&lt;/code&gt;的第一个&lt;code&gt;sym&lt;/code&gt;是&lt;code&gt;define&lt;/code&gt;，说明他正在进行&lt;code&gt;do_define_form&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;怎么让解释器往下走&#34;&gt;怎么让解释器往下走？
&lt;/h3&gt;&lt;p&gt;在最上面有几个按钮，分别是下面几个
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-3.png&#34;
	width=&#34;1990&#34;
	height=&#34;975&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-3_hu_e58e6b4f1cb24c9c.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-3_hu_6ce42203d39fd00.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;489px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Step Into&lt;/code&gt; 如果当前语句是一个&lt;code&gt;call expression&lt;/code&gt;，他就会进入函数体让你看函数体内部是怎么执行的；否则和&lt;code&gt;Step Over&lt;/code&gt;一样。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Step Over&lt;/code&gt;：不管是否是&lt;code&gt;call expression&lt;/code&gt;直接当一条普通语句运行过去。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Step Out&lt;/code&gt;：跳出当前&lt;code&gt;Frame&lt;/code&gt;（比如&lt;code&gt;A&lt;/code&gt;里面调用了&lt;code&gt;B&lt;/code&gt;函数，我现在通过&lt;code&gt;Step Into&lt;/code&gt;进入了&lt;code&gt;B&lt;/code&gt;所在的&lt;code&gt;Frame&lt;/code&gt;,&lt;code&gt;Step Out&lt;/code&gt;就直接回到&lt;code&gt;A&lt;/code&gt;里面）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们按&lt;code&gt;Step Into&lt;/code&gt;，你会发现他跳过了上面的&lt;code&gt;if&lt;/code&gt;语句；这是因为我们现在是在&lt;code&gt;do_define_form&lt;/code&gt;，并不是尾递归操作，所以就调用原始的&lt;code&gt;eval_call&lt;/code&gt;.
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-1.png&#34;
	width=&#34;2029&#34;
	height=&#34;1298&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-1_hu_51bdeffbd0c5e2da.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-1_hu_e91b74b60714ad0f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;375px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们再次选择&lt;code&gt;Step Into&lt;/code&gt;，发现：
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-2.png&#34;
	width=&#34;2048&#34;
	height=&#34;1187&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-2_hu_46d78e0e6cfec730.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-2_hu_63b72faa481d27c6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;414px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个部分就比较好理解了，他就是在做&lt;code&gt;define&lt;/code&gt;的内容，我就不解释了。&lt;/p&gt;
&lt;h3 id=&#34;做完define-form之后&#34;&gt;做完&lt;code&gt;define form&lt;/code&gt;之后
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;按照解释器解释的规则，我们把&lt;code&gt;factor&lt;/code&gt;绑定到对应的&lt;code&gt;lambda&lt;/code&gt;函数之后，就会执行&lt;code&gt;(factor 10 1)&lt;/code&gt;
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-4.png&#34;
	width=&#34;2030&#34;
	height=&#34;1157&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-4_hu_3546ab439f36080f.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-4_hu_35a50a43f8e40f9f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;421px&#34;
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么他的的执行顺序就是（请你注意看左下角的&lt;code&gt;CALL_STACK&lt;/code&gt;）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;eval factor&lt;/code&gt;
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-5.png&#34;
	width=&#34;1913&#34;
	height=&#34;1072&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-5_hu_6e5c3be44559aacf.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-5_hu_a574f09b3c922cbf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;428px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval 10&lt;/code&gt;
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-6.png&#34;
	width=&#34;1826&#34;
	height=&#34;932&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-6_hu_9a97f525e32ca911.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-6_hu_55bd2f60c84ce583.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;470px&#34;
	
&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval 1&lt;/code&gt;
图略，类似上面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apply lambda 10 1&lt;/code&gt;
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-7.png&#34;
	width=&#34;1917&#34;
	height=&#34;1078&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-7_hu_c52b46d4ebd6919a.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-7_hu_5a3cebd51d117c4d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们发现这些都不是尾递归；&lt;/p&gt;
&lt;p&gt;在这一步之后选择&lt;code&gt;Step Into&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;进入apply过程&#34;&gt;进入apply过程！
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;你会发现apply后，他就在&lt;code&gt;do_if_form&lt;/code&gt;。注意，在调用&lt;code&gt;do_if_form&lt;/code&gt;的时候参数&lt;code&gt;tail=True&lt;/code&gt;
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-8.png&#34;
	width=&#34;1925&#34;
	height=&#34;1170&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-8_hu_7ef3193e4b7cc3c8.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-8_hu_1562a7bd6017a49.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;394px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里继续选择&lt;code&gt;Step into&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后就到了最核心的部分，这里终于会有&lt;code&gt;Unevaluated&lt;/code&gt;类产生了（下面都简写为&lt;code&gt;un&lt;/code&gt;类）
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-9.png&#34;
	width=&#34;1916&#34;
	height=&#34;1036&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-9_hu_9e46d4b5cb7b4369.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-9_hu_2195e23a225f4cde.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;184&#34;
		data-flex-basis=&#34;443px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里你要思考，我的&lt;code&gt;un&lt;/code&gt;类返回到哪里了？你点一下&lt;code&gt;Step Into&lt;/code&gt;，发现这个东西是返回到了&lt;code&gt;scheme_eval&lt;/code&gt;里面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那么他是在&lt;code&gt;eval&lt;/code&gt;谁？你看左边的&lt;code&gt;Variables&lt;/code&gt;，这会正在做&lt;code&gt;do_define_form&lt;/code&gt;。
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-10.png&#34;
	width=&#34;2032&#34;
	height=&#34;1145&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-10_hu_8116841787510123.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-10_hu_4f592adef92ee01a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;425px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后你就会发现他回到了最外层的&lt;code&gt;apply&lt;/code&gt;的过程
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-11.png&#34;
	width=&#34;2039&#34;
	height=&#34;1211&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-11_hu_9aaf30d39816fda8.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-11_hu_29d25ab295843dc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;404px&#34;
	
&gt;
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-12.png&#34;
	width=&#34;2031&#34;
	height=&#34;1204&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-12_hu_19330605a6e03e80.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-12_hu_ab569d6db23fe85d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;404px&#34;
	
&gt;
&lt;img src=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-13.png&#34;
	width=&#34;2035&#34;
	height=&#34;1212&#34;
	srcset=&#34;https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-13_hu_aba62204331d2c13.png 480w, https://SweetGargamel.github.io/p/%E8%A7%A3%E6%9E%90sicp-proj4-ec/attachments/index.zh-cn-13_hu_8671ea0ff0bd871b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;167&#34;
		data-flex-basis=&#34;402px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;诶你是不是发现，这里上面虽然最左边的&lt;code&gt;tail&lt;/code&gt;是&lt;code&gt;false&lt;/code&gt;,但是这里返回了&lt;code&gt;un&lt;/code&gt;类。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;思路理顺&#34;&gt;思路理顺
&lt;/h3&gt;&lt;p&gt;通过上面的分析，我们发现，实际上&lt;code&gt;un&lt;/code&gt;类并不会”漏出去“，实际上他是通过好层的递归调用，在最外层的&lt;code&gt;eval_call&lt;/code&gt;（&lt;code&gt;eval&lt;/code&gt;的是函数的&lt;code&gt;call-expression&lt;/code&gt;)拿到了最里层&lt;code&gt;eval_call&lt;/code&gt;（这里是&lt;code&gt;do_if_form&lt;/code&gt;）返回的&lt;code&gt;un&lt;/code&gt;类，然后再循环往复的&lt;code&gt;eval&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;反思总结&#34;&gt;反思总结
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我和xsh和fhy同学都交流过，他们似乎都感觉最后这个&lt;code&gt;un&lt;/code&gt;类会被返回到最外层，从而你最后的&lt;code&gt;eval&lt;/code&gt;结果都是一个&lt;code&gt;un&lt;/code&gt;类。说明这应该是许多同学的共同的问题&lt;/li&gt;
&lt;li&gt;然而通过&lt;code&gt;Debug&lt;/code&gt;的逐句调用，我们发现靠空想是不行的，需要深入的一行行把自己当编译器理解。&lt;code&gt;Debug&lt;/code&gt;应该是我们要掌握的一门技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后再次感谢助教、各位同学的帮助！&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
